buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
        classpath "org.spongepowered:mixingradle:0.7.+"
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = "${lib_mod_version}"

base {
    archivesName = "${lib_mod_id}-${lib_mod_loader}-${minecraft_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=${lib_mod_id}.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=${lib_mod_id}.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=${lib_mod_id}.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "${lib_mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${lib_mod_id}.refmap.json"
    config "${lib_mod_id}.mixins.json"
}

repositories {
    flatDir {
        dirs 'lib'
    }
    maven { url 'https://jitpack.io' }
    maven { // Registrate
        url "https://maven.tterrag.com/"
    }
    maven {
        // Location of the maven for vazkii's mods
        name 'blamejared'
        url 'https://maven.blamejared.com'
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url = "https://maven.jaackson.me"
    }
    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        url "https://api.modrinth.com/maven"
    }
    maven {
        url "https://maven.ryanliptak.com/"
    }
    maven {
        url "https://maven.shedaniel.me"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    //implementation fg.deobf("dev.xkmc.cuisinedelight:cuisinedelight:1.1.12-slim")
    //implementation fg.deobf("dev.xkmc.fruitsdelight:fruitsdelight:1.0.10-slim")
    implementation fg.deobf("dev.xkmc.l2library:l2library:2.4.25-slim")
    implementation fg.deobf("dev.xkmc.l2serial:l2serial:1.2.2")
    implementation fg.deobf("curse.maven:farmers-delight-398521:5051242")
    implementation fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}")
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    implementation fg.deobf("curse.maven:just-enough-effect-descriptions-jeed-532286:4599236")

    implementation fg.deobf("curse.maven:touhou-little-maid-355044:5406149")
    implementation fg.deobf("curse.maven:youkais-homecoming-957437:5473188")

    implementation fg.deobf("curse.maven:jade-324717:4654448")
    //implementation fg.deobf("curse.maven:create-328085:4835191")
    runtimeOnly fg.deobf("curse.maven:appleskin-248787:4605078")
    runtimeOnly fg.deobf("curse.maven:patchouli-306770:4633797")
    runtimeOnly fg.deobf("curse.maven:spark-361579:4738952")

    implementation fg.deobf("curse.maven:bookshelf-228525:4808092")
    //implementation fg.deobf("curse.maven:botany-trees-411357:4719845")
    //implementation fg.deobf("curse.maven:botany-pots-353928:4793076")
    //implementation fg.deobf("curse.maven:serene-seasons-291874:4761603")
    //compileOnly fg.deobf("curse.maven:diet-443570:4634780")
    //compileOnly fg.deobf("curse.maven:thirst-was-taken-679270:5071555")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,mod_license: mod_license,
            lib_mod_id: lib_mod_id, lib_mod_name: lib_mod_name, lib_mod_license: lib_mod_license, lib_mod_version: lib_mod_version,
            lib_mod_authors: lib_mod_authors, lib_mod_description: lib_mod_description,youkaishomecoming_version_range: youkaishomecoming_version_range,
            test_mod_id: test_mod_id, test_mod_name: test_mod_name, test_mod_license: test_mod_license, test_mod_version: test_mod_version,
            test_mod_authors: test_mod_authors, test_mod_description: test_mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": lib_mod_id,
                "Specification-Vendor": lib_mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": lib_mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${lib_mod_id}",
                "Specification-Vendor"    : "${lib_mod_authors}",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "${lib_mod_authors}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'            : "${lib_mod_id}.mixins.json"
        ])
    }
}